#!/usr/bin/ruby

def main(args)
  all_dirs = Dir["*/"]
  all_dirs.delete "bin/"

  # push_subtrees_with_simple_branch_names all_dirs
  if $pushing
    if $simple
      puts "Pushing subtrees with simplified dir's name"
      push_subtrees_with_simple_branch_names(all_dirs)
    else
      puts "Pushing subtrees with dir's name"
      push_subtrees_with_dir_names(all_dirs)
    end
  else
    return usage
  end
end

def usage
  puts "Usage: push-subtrees"
  puts ""
  puts "Push all sub-dirs into branches with the dir name"
  puts "e.g. git subtree push --prefix 2016-05---Py-Django-Rest---django-rest-take-2 origin 2016-05---Py-Django-Rest---django-rest-take-2"
  puts ""
  puts "-p for pushing with original dir names"
  puts "-t for showing matched dirs and corresponding branch names"
  puts "-s for simple branch name, e.g. django-rest-take-2"
end

def push_subtrees_with_dir_names(dirs)
  dirs.each do |dir_name|
    branch_name = dir_name.chomp('/')
    push_subtree(dir_name, branch_name)
  end
end

def push_subtrees_with_simple_branch_names(dirs)
  prefixes_and_branch_names = prefixes_and_branch_names_for_dirs dirs
  prefixes_and_branch_names.each do |prefix, branch_name|
    push_subtree(prefix, branch_name)
  end
end

def prefixes_and_branch_names_for_dirs(dirs)
  dirs.map do |prefix|
    branch_name = /.*---(.*)\//.match(prefix)[1]
    [prefix, branch_name]
  end
end

def push_subtree(prefix, branch_name)
  #
  if $testing
    __test__ prefix, branch_name
  else
    puts `git subtree push --prefix #{prefix} origin #{branch_name}`
  end

  # git subtree push --prefix 2016-05---Py-Django-Rest---django-rest-take-2 origin django-rest-take-2
end

def __test__(prefix, branch_name)
  puts "Prefix:\t\t" + prefix
  puts "Branch name:\t" + branch_name
  puts
end

def delete_remote_branch(branch_name)
  puts `git push origin --delete #{branch_name}`
end

args = ARGV
$testing = args.include? '-t'
$simple = args.include? '-s'
$pushing = args.include? '-p'

main args
